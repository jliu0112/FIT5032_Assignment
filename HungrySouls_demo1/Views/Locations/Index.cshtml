@model IEnumerable<HungrySouls_demo1.Models.Location>

@{
    ViewBag.Title = "Come to Us";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Come To Find Us</h2>

<p>
    @*@Html.ActionLink("Create New", "Create")*@
</p>
<div id="map" style="width: 1200px; height:640px;">
</div>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Description)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Latitude)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Longitude)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr class="coordinates">
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td class="description">
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            <td class="latitude">
                @Html.DisplayFor(modelItem => item.Latitude)
            </td>
            <td class="longitude">
                @Html.DisplayFor(modelItem => item.Longitude)
            </td>
            @*<td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                    @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                </td>*@
        </tr>
    }

</table>

@section Scripts {
    @Scripts.Render("~/bundles/mapbox")
}
<script>

    mapboxgl.accessToken = "pk.eyJ1IjoianVucnUwMTEyIiwiYSI6ImNrMWZpazJ5NDAxd2YzZG03ODZ4M3phcGwifQ.onx6N5G45Pk6yduxWdHbkA";
    var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v10',
        center: [145.04583700, -37.87682300], // starting position
        zoom: 12
    });

    var geocoder = new MapboxGeocoder({ // Initialize the geocoder
        accessToken: mapboxgl.accessToken, // Set the access token
        mapboxgl: mapboxgl, // Set the mapbox-gl instance
        marker: false, // Do not use the default marker style
        placeholder: 'Search for places in Aulstralia', // Placeholder text for the search bar
        bbox: [112.30937, -10.84214, 154.23715, -43.89838], // Boundary for Berkeley
        proximity: {
            longitude: 145.04583700,
            latitude: -37.87682300
        } // Coordinates of Australia
    });

    // Add the geocoder to the map
    map.addControl(geocoder);
    map.addControl(new MapboxDirections({
accessToken: mapboxgl.accessToken
}), 'top-left');
    // After the map style has loaded on the page,
    // add a source layer and default styling for a single point
    map.on('load', function () {
        map.addSource('single-point', {
            type: 'geojson',
            data: {
                type: 'FeatureCollection',
                features: []
            }
        });

        map.addLayer({
            id: 'point',
            source: 'single-point',
            type: 'circle',
            paint: {
                'circle-radius': 10,
                'circle-color': '#448ee4'
            }
        });
        map.addSource('single-point', {
            type: 'geojson',
            data: {
                type: 'FeatureCollection',
                features: [] // Notice that initially there are no features
            }
        });

        map.addLayer({
            id: 'point',
            source: 'single-point',
            type: 'circle',
            paint: {
                'circle-radius': 10,
                'circle-color': '#007cbf',
                'circle-stroke-width': 3,
                'circle-stroke-color': '#fff'
            }
        });
        // Listen for the `result` event from the Geocoder
        // `result` event is triggered when a user makes a selection
        // Add a marker at the result's coordinates
        geocoder.on('result', function (ev) {
            map.getSource('single-point').setData(searchResult);

        });

    });
</script>
<script>
    mapboxgl.accessToken = "pk.eyJ1IjoianVucnUwMTEyIiwiYSI6ImNrMWZpazJ5NDAxd2YzZG03ODZ4M3phcGwifQ.onx6N5G45Pk6yduxWdHbkA";
    var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v10',
        center: [145.04583700, -37.87682300], // starting position
        zoom: 12
    });
    // set the bounds of the map
    var bounds = [[112.069003, -10.395273], [154.303707, -43.612333]];
    map.setMaxBounds(bounds);

    // initialize the map canvas to interact with later
    var canvas = map.getCanvasContainer();

    // an arbitrary start will always be the same
    // only the end or destination will change
    var start = [145.04583700, -37.87682300];
    // create a function to make a directions request
    function getRoute(end) {
        // make a directions request using cycling profile
        // an arbitrary start will always be the same
        // only the end or destination will change
        var start = [145.04583700, -37.87682300];
        var url = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + start[0] + ',' + start[1] + ';' + end[0] + ',' + end[1] + '?steps=true&geometries=geojson&access_token=' + mapboxgl.accessToken;

        // make an XHR request https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest
        var req = new XMLHttpRequest();
        req.responseType = 'json';
        req.open('GET', url, true);
        req.onload = function () {
            var data = req.response.routes[0];
            var route = data.geometry.coordinates;
            var geojson = {
                type: 'Feature',
                properties: {},
                geometry: {
                    type: 'LineString',
                    coordinates: route
                }
            };
            // if the route already exists on the map, reset it using setData
            if (map.getSource('route')) {
                map.getSource('route').setData(geojson);
            } else { // otherwise, make a new request
                map.addLayer({
                    id: 'route',
                    type: 'line',
                    source: {
                        type: 'geojson',
                        data: {
                            type: 'Feature',
                            properties: {},
                            geometry: {
                                type: 'LineString',
                                coordinates: geojson
                            }
                        }
                    },
                    layout: {
                        'line-join': 'round',
                        'line-cap': 'round'
                    },
                    paint: {
                        'line-color': '#3887be',
                        'line-width': 5,
                        'line-opacity': 0.75
                    }
                });
            }
            // add turn instructions here at the end
        };
        req.send();
    }

    map.on('load', function () {
        // make an initial directions request that
        // starts and ends at the same location
        getRoute(start);

        // Add starting point to the map
        map.addLayer({
            id: 'point',
            type: 'circle',
            source: {
                type: 'geojson',
                data: {
                    type: 'FeatureCollection',
                    features: [{
                        type: 'Feature',
                        properties: {},
                        geometry: {
                            type: 'Point',
                            coordinates: start
                        }
                    }
                    ]
                }
            },
            paint: {
                'circle-radius': 10,
                'circle-color': '#3887be'
            }
        });
        map.on('click', function (e) {
            var coordsObj = e.lngLat;
            canvas.style.cursor = '';
            var coords = Object.keys(coordsObj).map(function (key) {
                return coordsObj[key];
            });
            var end = {
                type: 'FeatureCollection',
                features: [{
                    type: 'Feature',
                    properties: {},
                    geometry: {
                        type: 'Point',
                        coordinates: coords
                    }
                }
                ]
            };
            if (map.getLayer('end')) {
                map.getSource('end').setData(end);
            } else {
                map.addLayer({
                    id: 'end',
                    type: 'circle',
                    source: {
                        type: 'geojson',
                        data: {
                            type: 'FeatureCollection',
                            features: [{
                                type: 'Feature',
                                properties: {},
                                geometry: {
                                    type: 'Point',
                                    coordinates: coords
                                }
                            }]
                        }
                    },
                    paint: {
                        'circle-radius': 10,
                        'circle-color': '#f30'
                    }
                });
            }
            getRoute(coords);

        });
                   // get the sidebar and add the instructions
        var instructions = document.getElementById('instructions');
        var steps = data.legs[0].steps;

        var tripInstructions = [];
        for (var i = 0; i < steps.length; i++) {
            tripInstructions.push('<br><li>' + steps[i].maneuver.instruction) + '</li>';
            instructions.innerHTML = '<br><span class="duration">Trip duration: ' + Math.floor(data.duration / 60) + ' min 🚴 </span>' + tripInstructions;
        }

    });
</script>
<style>
    #instructions {
        position: absolute;
        margin: 20px;
        width: 25%;
        top: 0;
        bottom: 20%;
        padding: 20px;
        background-color: rgba(255, 255, 255, 0.9);
        overflow-y: scroll;
        font-family: sans-serif;
        font-size: 0.8em;
        line-height: 2em;
    }

    .duration {
        font-size: 2em;
    }
</style>